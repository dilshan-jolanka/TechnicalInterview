{"current_page": "interview", "user_data": {"name": "dfsfsdf", "email": "sdfsdfsdf", "candidate_id": 55, "session_id": "1b2d892d-7d4b-4458-9513-12db1db37437"}, "questions": [{"id": 90, "category": "Data Structure and Algorithm", "question": "Recursion \u2013 Factorial\n\nWhat is logged?", "code_snippet": "function fact(n){\n  if(n===0) return 1;\n  return n*fact(n-1);\n}\nconsole.log(fact(4));\n", "options": ["24", "16", "120", "error"], "correct": "A"}, {"id": 92, "category": "Data Structure and Algorithm", "question": "BFS Traversal (Graph)\n\nWhat is printed first?", "code_snippet": "// Graph represented as adjacency list\nconst graph = { 0:[1,2], 1:[2], 2:[0,3], 3:[3] };\nconst bfs = (start) => {\n  const queue = [start], visited = new Set([start]);\n  while(queue.length){\n    const node = queue.shift();\n    console.log(node);\n    for(let n of graph[node]){\n      if(!visited.has(n)){\n        visited.add(n);\n        queue.push(n);\n      }\n    }\n  }\n}\nbfs(2);\n", "options": ["0", "1", "2", "3"], "correct": "C"}, {"id": 41, "category": "General Knowledge", "question": "Which of these is a type of cyber attack?", "code_snippet": "", "options": ["Phishing ", "Parsing", "Paging", "Pivoting"], "correct": "A"}, {"id": 68, "category": "ASP.Net", "question": "ASP.NET Core Dependency Injection\n\nWhat is the lifetime of this service?", "code_snippet": "services.AddScoped<IRepository, Repository>();\n", "options": ["Single instance for the entire application", "New instance for every request", "New instance every time injected", "No lifetime management"], "correct": "B"}, {"id": 55, "category": "SQL Database", "question": "GROUP BY with Multiple Columns\n\nWhat does this return?\n\n", "code_snippet": "SELECT ProductId, CustomerId, SUM(Quantity) AS TotalQty\nFROM OrderDetails\nGROUP BY ProductId, CustomerId;\n\n", "options": ["Total quantity per product only", "Total quantity per customer only", "Total quantity ordered per product by each customer", "Grand total of all quantities"], "correct": "C"}, {"id": 51, "category": "SQL Database", "question": "GROUP BY with HAVING \u2013 Customers with More Than 5 Orders\n\nWhat is the result?\n\n", "code_snippet": "SELECT CustomerId, COUNT(OrderId) AS OrderCount\nFROM Orders\nGROUP BY CustomerId\nHAVING COUNT(OrderId) > 5;\n", "options": ["Customers with exactly 5 orders", "Customers with more than 5 orders", "All customers with their order counts", "Only the top customer with the most orders"], "correct": "B"}, {"id": 61, "category": "C# Programming", "question": "Null-Coalescing Operator\n\nWhat is printed?", "code_snippet": "string str = null;\nstring result = str ?? \"default\";\nConsole.WriteLine(result);\n", "options": ["null", "default", "Compilation Error", "Empty String"], "correct": "B"}, {"id": 76, "category": "JavaScript", "question": "Event Loop\n\nWhat is the output order?", "code_snippet": "console.log(\"Start\");\nsetTimeout(() => console.log(\"Timeout\"), 0);\nPromise.resolve().then(() => console.log(\"Promise\"));\nconsole.log(\"End\");\n", "options": ["Start \u2192 End \u2192 Timeout \u2192 Promise", "Start \u2192 Timeout \u2192 Promise \u2192 End", "Start \u2192 End \u2192 Promise \u2192 Timeout", "Timeout \u2192 Promise \u2192 Start \u2192 End"], "correct": "C"}, {"id": 80, "category": "JavaScript", "question": "Variable Types\n\nWhat will be logged?", "code_snippet": "let name = \"John\";\nlet age = 25;\nconsole.log(typeof name, typeof age);\n", "options": ["string number", "number string", "string string", "undefined undefined"], "correct": "A"}, {"id": 73, "category": "ASP.Net", "question": "ASP.NET Core Web API \u2013 Model Binding\n\nWhat is required for this action to bind correctly?", "code_snippet": "[HttpPost]\npublic IActionResult Create([FromBody] Product product)\n{\n    return Ok(product.Name);\n}\n", "options": ["Query string ?Name=...", "JSON body { \"Name\": \"Laptop\" }", "XML body <Product><Name>Laptop</Name></Product>", "Form data field Name=Laptop"], "correct": "B"}, {"id": 78, "category": "JavaScript", "question": "this Keyword\n\nWhat will be logged?", "code_snippet": "const person = {\n  name: \"Alice\",\n  greet: function() {\n    console.log(this.name);\n  }\n};\nsetTimeout(person.greet, 100);\n", "options": ["\"Alice\"", "undefined", "null", "Error"], "correct": "B"}, {"id": 42, "category": "General Knowledge", "question": "Which of these is a Linux command to list files?", "code_snippet": "", "options": ["show", "list", "dir", "ls "], "correct": "D"}, {"id": 72, "category": "ASP.Net", "question": "ASP.NET Core \u2013 Middleware Short-Circuiting\n\nWhat will be the response?", "code_snippet": "app.Use(async (context, next) =>\n{\n    await context.Response.WriteAsync(\"A\");\n    // next() not called\n});\n\napp.Run(async context =>\n{\n    await context.Response.WriteAsync(\"B\");\n});\n", "options": ["A", "AB", "B", "Nothing"], "correct": "A"}, {"id": 59, "category": "C# Programming", "question": "String Immutability\n\nWhat will be printed?", "code_snippet": "string s1 = \"hello\";\nstring s2 = s1;\ns1 = \"world\";\nConsole.WriteLine(s2);\n", "options": ["hello", "world", "null", "Compilation Error"], "correct": "A"}, {"id": 57, "category": "C# Programming", "question": "LINQ \u2013 Find Highest Salary\n\nWhat will be printed?", "code_snippet": "var employees = new List<Employee>\n{\n    new Employee { Id = 1, Name = \"A\", Salary = 3000 },\n    new Employee { Id = 2, Name = \"B\", Salary = 5000 },\n    new Employee { Id = 3, Name = \"C\", Salary = 4000 }\n};\n\nvar result = employees.OrderByDescending(e => e.Salary).First();\nConsole.WriteLine(result.Name);\n", "options": ["A", "B", "C", "Compilation Error"], "correct": "B"}, {"id": 54, "category": "SQL Database", "question": "JOIN \u2013 Orders with Customers\n\nWhat is the output?\n\n", "code_snippet": "SELECT c.CustomerName, o.OrderId, o.OrderDate\nFROM Customers c\nLEFT JOIN Orders o ON c.CustomerId = o.CustomerId;\n\n", "options": ["Customers who placed at least one order", "All customers with their orders (if any)", "Only customers with no orders", "Only orders without customers"], "correct": "B"}, {"id": 83, "category": "JavaScript", "question": "Default Parameters\n\nWhat is logged?", "code_snippet": "function multiply(a, b = 2) {\n  return a * b;\n}\nconsole.log(multiply(5));\n", "options": ["5", "10", "NaN", "Error"], "correct": "B"}, {"id": 79, "category": "JavaScript", "question": "Map vs ForEach\n\nWhat is logged?", "code_snippet": "const result = [1, 2, 3].map(x => x * 2);\nconsole.log(result);\n", "options": ["undefined", "[1,2,3]", "[2,4,6]", "[NaN, NaN, NaN]"], "correct": "C"}, {"id": 87, "category": "Data Structure and Algorithm", "question": "Queue \u2013 FIFO Behavior\n\nWhat is logged?", "code_snippet": "const queue = [];\nqueue.push(1);\nqueue.push(2);\nqueue.shift();\nconsole.log(queue[0]);\n", "options": ["1", "2", "undefined", "Error"], "correct": "B"}, {"id": 74, "category": "ASP.Net", "question": "ASP.NET Core Identity \u2013 Cookie Authentication\n\nWhat happens when an unauthenticated user requests a protected page?", "code_snippet": "services.AddAuthentication(\"MyCookie\")\n    .AddCookie(\"MyCookie\", options =>\n    {\n        options.LoginPath = \"/Account/Login\";\n    });\n", "options": ["They get HTTP 403 Forbidden", "They get redirected to /Account/Login", "They get null response", "The server crashes"], "correct": "B"}, {"id": 52, "category": "SQL Database", "question": "JOIN with Aggregation \u2013 Total Sales per Department\n\nWhat does this show?\n\n", "code_snippet": "SELECT d.DepartmentName, SUM(o.OrderAmount) AS TotalSales\nFROM Orders o\nJOIN Employees e ON o.EmployeeId = e.EmployeeId\nJOIN Departments d ON e.DepartmentId = d.DepartmentId\nGROUP BY d.DepartmentName;\n", "options": ["Each employee\u2019s total sales", "Company-wide total sales", "Only the top-selling department", "Each department\u2019s total sales"], "correct": "D"}, {"id": 65, "category": "ASP.Net", "question": "ASP.NET MVC \u2013 Action Result Types\n\nWhat will this method return to the client?", "code_snippet": "public ActionResult GetData()\n{\n    return Json(new { Name = \"Test\", Age = 25 }, JsonRequestBehavior.AllowGet);\n}\n", "options": ["HTML page", "JSON object", "XML response", "Plain text"], "correct": "B"}, {"id": 60, "category": "C# Programming", "question": "Polymorphism\n\nWhat is the output?", "code_snippet": "class Base \n{\n    public virtual void Show() => Console.WriteLine(\"Base\");\n}\n\nclass Derived : Base\n{\n    public override void Show() => Console.WriteLine(\"Derived\");\n}\n\nBase obj = new Derived();\nobj.Show();\n", "options": ["Base", "Runtime Error", "Compilation Error", "Derived"], "correct": "D"}, {"id": 40, "category": "General Knowledge", "question": "What does SQL stand for?", "code_snippet": "", "options": ["Simple Query Language", "Sequential Query Logic", "Structured Query Language", "Standard Question Language"], "correct": "C"}, {"id": 77, "category": "JavaScript", "question": "Object Reference\n\nWhat is logged?", "code_snippet": "let obj1 = { a: 1 };\nlet obj2 = obj1;\nobj2.a = 5;\nconsole.log(obj1.a);\n", "options": ["1", "5", "undefined", "Error"], "correct": "B"}, {"id": 56, "category": "SQL Database", "question": "UPDATE with JOIN on Multiple Tables\n\nWhat will this update?\n\n", "code_snippet": "UPDATE o\nSET o.Status = 'Shipped'\nFROM Orders o\nJOIN OrderDetails od ON o.OrderId = od.OrderId\nJOIN Products p ON od.ProductId = p.ProductId\nWHERE p.Category = 'Electronics';\n", "options": ["Marks only Electronics-related orders as shipped", "Marks all orders as shipped", "Marks only orders without products as shipped", "Does not update any order"], "correct": "A"}, {"id": 37, "category": "General Knowledge", "question": "What is the value of (15 \u00d7 4) \u00f7 5?", "code_snippet": "", "options": ["10", "12", "14", "16"], "correct": "B"}, {"id": 69, "category": "ASP.Net", "question": "ASP.NET Web API \u2013 Attribute Routing\n\nWhat URL will fetch product with ID=5?", "code_snippet": "[Route(\"api/[controller]\")]\npublic class ProductsController : ControllerBase\n{\n    [HttpGet(\"{id}\")]\n    public IActionResult Get(int id)\n    {\n        return Ok(\"Product \" + id);\n    }\n}\n", "options": ["/api/Products?id=5", "/Products/5", "/api/Products/5", "/Products?id=5"], "correct": "C"}, {"id": 66, "category": "ASP.Net", "question": "ASP.NET Core Middleware Order\n\nWhat will be the response order?", "code_snippet": "app.Use(async (context, next) =>\n{\n    await context.Response.WriteAsync(\"1\");\n    await next.Invoke();\n    await context.Response.WriteAsync(\"2\");\n});\n\napp.Run(async context =>\n{\n    await context.Response.WriteAsync(\"3\");\n});\n", "options": ["1-3", "1-2-3", "1-3-2", "3-2-1"], "correct": "C"}, {"id": 47, "category": "SQL Database", "question": "What will this query return?\n\n\n", "code_snippet": "SELECT e.EmployeeName, d.DepartmentName\nFROM Employees e\nINNER JOIN Departments d ON e.DepartmentId = d.DepartmentId;", "options": ["List of all employees without departments", "List of departments without employees", "List of employees along with their department names", "Count of employees in each department"], "correct": "C"}, {"id": 84, "category": "JavaScript", "question": "Array Includes\n\nWhat is logged?", "code_snippet": "let letters = [\"a\", \"b\", \"c\"];\nconsole.log(letters.includes(\"b\"));\n", "options": ["true", "false", "\"b\"", "Error"], "correct": "A"}, {"id": 96, "category": "C# Programming", "question": "List \u2013 Add & Remove\n\nWhat is logged?\n\n", "code_snippet": "List \u2013 Add & Remove\n\nWhat is logged?\n\nvar list = new List<int>{1,2,3};\nlist.Add(4);\nlist.Remove(2);\nConsole.WriteLine(list.Count);\n\n", "options": ["2", "3", "4", "5"], "correct": "B"}, {"id": 94, "category": "Data Structure and Algorithm", "question": "Two Pointer \u2013 Pair Sum\n\nWhat is logged?", "code_snippet": "const arr = [1, 2, 3, 4, 5];\nconst target = 6;\nlet left = 0, right = arr.length-1;\nwhile(left < right){\n  if(arr[left] + arr[right] === target){\n    console.log([arr[left], arr[right]]);\n    break;\n  } else if(arr[left] + arr[right] < target) left++;\n  else right--;\n}\n", "options": ["[1,5]", "[2,4]", "[1,6]", "[3,3]"], "correct": "A"}, {"id": 49, "category": "SQL Database", "question": "UPDATE with JOIN \u2013 Increase Salary by Department\n\nWhat does this query do?\n\n", "code_snippet": "UPDATE e\nSET e.Salary = e.Salary * 1.10\nFROM Employees e\nJOIN Departments d ON e.DepartmentId = d.DepartmentId\nWHERE d.DepartmentName = 'IT';\n\n", "options": ["Increases all employees\u2019 salaries by 10%", "Increases the salary of IT department employees by 10%", "Increases the salary of non-IT employees by 10%", "Decreases IT employees\u2019 salary by 10%"], "correct": "B"}, {"id": 38, "category": "General Knowledge", "question": "Which protocol is used to send emails?", "code_snippet": "", "options": ["POP3", "HTTP", "SMTP ", "FTP"], "correct": "C"}, {"id": 75, "category": "JavaScript", "question": "Closure Scope\n\nWhat will be logged?", "code_snippet": "function makeCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\n\nconst counter = makeCounter();\nconsole.log(counter());\nconsole.log(counter());\n", "options": ["0, 1", "Error", "undefined, undefined", "1, 2"], "correct": "D"}, {"id": 88, "category": "Data Structure and Algorithm", "question": "Linked List \u2013 Insert Node\n\nWhat is logged?", "code_snippet": "class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nlet head = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\nconsole.log(head.next.next.value);\n", "options": ["1", "2", "3", "null"], "correct": "C"}, {"id": 91, "category": "Data Structure and Algorithm", "question": "String Reverse Using Stack\n\nWhat is logged?", "code_snippet": "const str = \"hello\";\nconst stack = str.split('');\nlet rev = \"\";\nwhile(stack.length) rev += stack.pop();\nconsole.log(rev);\n", "options": ["hello", "olleh", "helol", "Error"], "correct": "B"}, {"id": 34, "category": "General Knowledge", "question": "On which date did the Indian Ocean tsunami hit Sri Lanka?", "code_snippet": "", "options": ["28th December 2008", "22th December 2004", "24th December 2004", "26th December 2004"], "correct": "D"}, {"id": 62, "category": "C# Programming", "question": "Delegate Invocation\n\nWhat is the output?", "code_snippet": "delegate int MyDelegate(int x);\n\nclass Program\n{\n    static void Main()\n    {\n        MyDelegate d = x => x * x;\n        Console.WriteLine(d(5));\n    }\n}\n", "options": ["5", "10", "25", "Compilation Error"], "correct": "C"}, {"id": 70, "category": "ASP.Net", "question": "Session in ASP.NET Core\n\nWhat will value contain?", "code_snippet": "HttpContext.Session.SetString(\"User\", \"Admin\");\nvar value = HttpContext.Session.GetString(\"User\");\n", "options": ["null", "Admin", "User", "Exception"], "correct": "B"}, {"id": 97, "category": "C# Programming", "question": "C# \u2013 Nullable Types and Null-Coalescing Operator\n\nWhat is logged?\n\n", "code_snippet": "int? x = null;\nint y = x ?? 10;\nConsole.WriteLine(y);\n", "options": ["0", "null", "10", "error"], "correct": "C"}, {"id": 35, "category": "General Knowledge", "question": "A shopkeeper bought an item for Rs. 800 and sold it for Rs. 1,000. What is the profit percentage?", "code_snippet": "", "options": ["20% ", "25%", "15%", "18%"], "correct": "A"}, {"id": 50, "category": "SQL Database", "question": "SELECT with Subquery \u2013 Employees Above Average Salary\n\nWhat does this return?\n\n", "code_snippet": "SELECT EmployeeName, Salary\nFROM Employees\nWHERE Salary > (SELECT AVG(Salary) FROM Employees);\n", "options": ["Employees with the minimum salary", "Employees with salary below average", "Employees with salary above average", "All employees with their salaries"], "correct": "C"}, {"id": 89, "category": "Data Structure and Algorithm", "question": "Binary Search Algorithm\n\nWhat is logged?", "code_snippet": "const arr = [1,3,5,7,9];\nlet left = 0, right = arr.length-1;\nlet target = 7;\nwhile(left <= right){\n  let mid = Math.floor((left+right)/2);\n  if(arr[mid] === target) console.log(mid);\n  else if(arr[mid] < target) left = mid+1;\n  else right = mid-1;\n}\n", "options": ["2", "4", "5", "3"], "correct": "D"}, {"id": 36, "category": "General Knowledge", "question": "If 12 pencils cost Rs. 60, what is the cost of 7 pencils?", "code_snippet": "", "options": ["Rs. 30", "Rs. 35", "Rs. 40", "Rs. 32"], "correct": "B"}, {"id": 86, "category": "Data Structure and Algorithm", "question": "Stack \u2013 LIFO Behavior\n\nWhat is logged?", "code_snippet": "const stack = [];\nstack.push(10);\nstack.push(20);\nstack.pop();\nconsole.log(stack[stack.length-1]);\n", "options": ["10", "20", "undefined", "Error"], "correct": "A"}, {"id": 43, "category": "General Knowledge", "question": "Which of these is a hashing algorithm?", "code_snippet": "", "options": ["AES", "SHA-256", "RSA", "DES"], "correct": "B"}, {"id": 58, "category": "C# Programming", "question": "Dictionary Lookup\n\nWhat is the output?", "code_snippet": "var dict = new Dictionary<int, string>\n{\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"}\n};\n\nConsole.WriteLine(dict[2]);\n", "options": ["One", "Two", "Three", "KeyNotFoundException"], "correct": "B"}, {"id": 93, "category": "Data Structure and Algorithm", "question": "Merge Two Sorted Arrays\n\nWhat is logged?", "code_snippet": "const a = [1,3,5];\nconst b = [2,4,6];\nconst merged = [...a,...b].sort((x,y)=>x-y);\nconsole.log(merged);\n", "options": ["[1,2,3,4,5,6]", "[1,3,5,2,4,6]", "[6,5,4,3,2,1]", "[1,2,3,5,4,6]"], "correct": "A"}, {"id": 82, "category": "JavaScript", "question": "Array Spread Operator\n\nWhat is logged?", "code_snippet": "let nums = [1, 2, 3];\nlet copy = [...nums, 4, 5];\nconsole.log(copy);\n", "options": ["[1,2,3]", "Error", "[[1,2,3],4,5]", "[1,2,3,4,5]"], "correct": "D"}, {"id": 48, "category": "SQL Database", "question": "What does this query output?\n\n\n", "code_snippet": "SELECT CustomerId, COUNT(OrderId) AS TotalOrders\nFROM Orders\nGROUP BY CustomerId;\n", "options": ["Total count of all orders", "Each customer with their order count", "Customers who have more than 1 order only", "Orders grouped by date"], "correct": "B"}, {"id": 63, "category": "C# Programming", "question": "LINQ Join\n\nWhat will it print?", "code_snippet": "var students = new[] \n{\n    new { Id = 1, Name = \"A\" },\n    new { Id = 2, Name = \"B\" }\n};\nvar marks = new[] \n{\n    new { StudentId = 1, Score = 90 },\n    new { StudentId = 2, Score = 80 }\n};\n\nvar query = from s in students\n            join m in marks on s.Id equals m.StudentId\n            select new { s.Name, m.Score };\n\nforeach (var q in query)\n    Console.WriteLine($\"{q.Name}-{q.Score}\");\n", "options": ["A-90, B-80", "A-80, B-90", "Compilation Error", "No output"], "correct": "A"}, {"id": 81, "category": "JavaScript", "question": "Template Literals\n\nWhat is logged?", "code_snippet": "let name = \"Sam\";\nlet age = 30;\nconsole.log(`${name} is ${age} years old`);\n", "options": ["Sam is 30 years old", "Sam is ${age} years old", "Sam30", "Error"], "correct": "A"}, {"id": 39, "category": "General Knowledge", "question": "Which of these is an example of an open-source database?", "code_snippet": "", "options": [" Oracle", "MySQL", "MS Access", "SQL Server"], "correct": "B"}, {"id": 85, "category": "Data Structure and Algorithm", "question": "Array \u2013 Find Missing Number\n\nWhat is logged?", "code_snippet": "// Array contains numbers from 1 to 5, one missing\nconst arr = [1, 2, 4, 5];\nconst n = 5;\nconst missing = n*(n+1)/2 - arr.reduce((a,b)=>a+b,0);\nconsole.log(missing);\n", "options": ["1", "2", "3", "4"], "correct": "C"}, {"id": 67, "category": "ASP.Net", "question": "ASP.NET MVC Routing\n\nWhich URL will map to HomeController \u2192 Index()?", "code_snippet": "routes.MapRoute(\n    name: \"Default\",\n    url: \"{controller}/{action}/{id}\",\n    defaults: new { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional }\n);\n", "options": ["/", "/Home/Index", "1-3-2", "None"], "correct": "C"}, {"id": 71, "category": "ASP.Net", "question": "Async Controller in ASP.NET\n\nWhat benefit does this provide?", "code_snippet": "public async Task<IActionResult> GetData()\n{\n    await Task.Delay(1000);\n    return Ok(\"Done\");\n}\n", "options": ["Runs faster than synchronous code always", "Frees up thread to handle other requests", "Executes multiple threads for one request", "Blocks until delay completes"], "correct": "B"}, {"id": 64, "category": "C# Programming", "question": "Ref vs Out\n\nWhat is printed?", "code_snippet": "void Test(out int x, ref int y)\n{\n    x = 10;\n    y = y + 5;\n}\n\nint a;\nint b = 20;\nnew Program().Test(out a, ref b);\nConsole.WriteLine($\"{a}-{b}\");\n", "options": ["10-25", "0-25", "10-20", "Compilation Error"], "correct": "A"}, {"id": 53, "category": "SQL Database", "question": "UPDATE with Subquery \u2013 Set Bonus Based on Average\n\nWhat will this update?\n\n", "code_snippet": "UPDATE Employees\nSET Bonus = 5000\nWHERE Salary > (SELECT AVG(Salary) FROM Employees);\n\n", "options": ["All employees\u2019 bonuses to 5000", "Employees earning below average salary", "Employees earning above-average salaries", "Employees in IT department only"], "correct": "C"}], "answers": {"90": "A", "92": "A"}, "current_question": 2, "form_data": {"name": "dfsfsdf", "email": "sdfsdfsdf"}, "time_limit": 60, "time_expired": false, "score": 0, "interview_submitted": false, "start_time": "2025-09-12T15:53:34.534886"}